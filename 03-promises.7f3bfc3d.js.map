{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAGzBC,EAAgB,CACpBC,SAAS,GAgCX,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAtCPR,EAAKC,KAAKe,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBAOF,IANA,IAAgCC,EAAAnB,EAAKC,KAAKmB,SAAlCC,EAAwBF,EAAxBX,MAAOc,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OAEjBC,EAAaC,OAAOJ,EAAMK,OACxBC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAEzBG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EAErCvB,EAAcuB,EADdL,GAAcG,GAEXG,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACjBV,EAAAkC,OAAOC,QACL,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,MAC5CJ,E,IAGL+B,OAAM,SAAAJ,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAClBV,EAAAkC,OAAOI,QACL,sBAAqCF,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,MAC3CJ,E,IAIRJ,EAAKC,KAAKoC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nconst notifyOptions = {\n  useIcon: false,\n};\n\nrefs.form.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n  const { delay, step, amount } = refs.form.elements;\n\n  let delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n  for (let i = 1; i <= amountValue; i += 1) {\n    delayValue += stepValue;\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          notifyOptions\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          notifyOptions\n        );\n      });\n  }\n  refs.form.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$notifyOptions","useIcon","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","_elements","elements","delay1","step","amount","delayValue","Number","value","stepValue","amountValue","i","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.7f3bfc3d.js.map"}